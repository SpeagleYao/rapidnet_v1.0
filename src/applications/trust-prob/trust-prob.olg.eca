ECA Rule ra_1Eca0Ins ACTION_LOCAL_SEND<etrustEvent(@Local, P1, P2, RID, HVID, BVID, RC, HC, BC, R)> :- EVENT_INSERT<trustPath(@Local, P1, P2, R)>, RC := ((ra_trustPath_+ P1)+ _)+ P2, HC := ((trustEvent+ P1)+ -)+ P2, BC := ((trustPath+ P1)+ -)+ P2, RID := f_sha1(((ra+ trustPath)+ P1)+ P2), HVID := f_sha1((trustEvent+ P1)+ P2), BVID := f_sha1((trustPath+ P1)+ P2).
ECA Rule ra_2_eca ACTION_ADD<trustEvent(@Local, P1, P2, R)> :- EVENT_RECV<etrustEvent(@Local, P1, P2, RID, HVID, BVID, RC, HC, BC, R)>.
ECA Rule ra_3_eca ACTION_LOCAL_SEND<insertProvEdge(@Local, HVID, RID, HC, RC)> :- EVENT_RECV<etrustEvent(@Local, P1, P2, RID, HVID, BVID, RC, HC, BC, R)>.
ECA Rule ra_4_eca ACTION_LOCAL_SEND<insertRuleEdge(@Local, RID, BVID, RC, BC)> :- EVENT_RECV<etrustEvent(@Local, P1, P2, RID, HVID, BVID, RC, HC, BC, R)>.
ECA Rule r1_1Eca0Ins ACTION_LOCAL_SEND<etrustPath(@Local, P1, P2, RID, HVID, BVID, RC, HC, BC, R)> :- EVENT_INSERT<trust(@Local, P1, P2, R)>, RC := ((r1_trust_+ P1)+ _)+ P2, HC := ((trustPath+ P1)+ -)+ P2, BC := ((trust+ P1)+ -)+ P2, RID := f_sha1(((r1+ trust)+ P1)+ P2), HVID := f_sha1((trustPath+ P1)+ P2), BVID := f_sha1((trust+ P1)+ P2).
ECA Rule r1_2_eca ACTION_ADD<trustPath(@Local, P1, P2, R)> :- EVENT_RECV<etrustPath(@Local, P1, P2, RID, HVID, BVID, RC, HC, BC, R)>.
ECA Rule r1_3_eca ACTION_LOCAL_SEND<insertProvEdge(@Local, HVID, RID, HC, RC)> :- EVENT_RECV<etrustPath(@Local, P1, P2, RID, HVID, BVID, RC, HC, BC, R)>.
ECA Rule r1_4_eca ACTION_LOCAL_SEND<insertRuleEdge(@Local, RID, BVID, RC, BC)> :- EVENT_RECV<etrustPath(@Local, P1, P2, RID, HVID, BVID, RC, HC, BC, R)>.
ECA Rule r2_1Eca0Ins ACTION_LOCAL_SEND<etrustPathR2(@Local, P1, P3, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)> :- EVENT_INSERT<trust(@Local, P1, P2, R)>, trustPath(@Local, P2, P3, R), P1 != P3, RC := ((((((r2_trust_+ P1)+ _)+ P2)+ _trustPath_)+ P2)+ _)+ P3, HC := ((trustPath+ P1)+ -)+ P3, BC1 := ((trust+ P1)+ -)+ P2, BC2 := ((trustPath+ P2)+ -)+ P3, RID := f_sha1((((((r2+ trust)+ P1)+ P2)+ trustPath)+ P2)+ P3), HVID := f_sha1((trustPath+ P1)+ P3), BVID1 := f_sha1((trust+ P1)+ P2), BVID2 := f_sha1((trustPath+ P2)+ P3).
ECA Rule r2_1Eca1Ins ACTION_LOCAL_SEND<etrustPathR2(@Local, P1, P3, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)> :- EVENT_INSERT<trustPath(@Local, P2, P3, R)>, trust(@Local, P1, P2, R), P1 != P3, RC := ((((((r2_trust_+ P1)+ _)+ P2)+ _trustPath_)+ P2)+ _)+ P3, HC := ((trustPath+ P1)+ -)+ P3, BC1 := ((trust+ P1)+ -)+ P2, BC2 := ((trustPath+ P2)+ -)+ P3, RID := f_sha1((((((r2+ trust)+ P1)+ P2)+ trustPath)+ P2)+ P3), HVID := f_sha1((trustPath+ P1)+ P3), BVID1 := f_sha1((trust+ P1)+ P2), BVID2 := f_sha1((trustPath+ P2)+ P3).
ECA Rule r2_2_eca ACTION_ADD<trustPath(@Local, P1, P3, R)> :- EVENT_RECV<etrustPathR2(@Local, P1, P3, RID, HVID, BVID1, BVID2, HC, RC, BC1, BC2, R)>.
ECA Rule r2_3_eca ACTION_LOCAL_SEND<insertProvEdge(@Local, HVID, RID, HC, RC)> :- EVENT_RECV<etrustPathR2(@Local, P1, P3, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)>.
ECA Rule r2_4_eca ACTION_LOCAL_SEND<insertRuleEdge(@Local, RID, BVID1, RC, BC1)> :- EVENT_RECV<etrustPathR2(@Local, P1, P3, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)>.
ECA Rule r2_5_eca ACTION_LOCAL_SEND<insertRuleEdge(@Local, RID, BVID2, RC, BC2)> :- EVENT_RECV<etrustPathR2(@Local, P1, P3, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)>.
ECA Rule r3_1Eca0Ins ACTION_LOCAL_SEND<emutualTrustPath(@Local, P1, P2, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)> :- EVENT_INSERT<trustEvent(@Local, P1, P2, R)>, trustPath(@Local, P2, P1, R), RC := ((((((r3_trustEvent_+ P1)+ _)+ P2)+ _trustPath_)+ P2)+ _)+ P1, HC := ((mutualTrustPath+ P1)+ -)+ P2, BC1 := ((trustEvent+ P1)+ -)+ P2, BC2 := ((trustPath+ P2)+ -)+ P1, RID := f_sha1((((((r3+ trustEvent)+ P1)+ P2)+ trustPath)+ P2)+ P1), HVID := f_sha1((mutualTrustPath+ P1)+ P2), BVID1 := f_sha1((trustEvent+ P1)+ P2), BVID2 := f_sha1((trustPath+ P2)+ P1).
ECA Rule r3_1Eca1Ins ACTION_LOCAL_SEND<emutualTrustPath(@Local, P1, P2, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)> :- EVENT_INSERT<trustPath(@Local, P2, P1, R)>, trustEvent(@Local, P1, P2, R), RC := ((((((r3_trustEvent_+ P1)+ _)+ P2)+ _trustPath_)+ P2)+ _)+ P1, HC := ((mutualTrustPath+ P1)+ -)+ P2, BC1 := ((trustEvent+ P1)+ -)+ P2, BC2 := ((trustPath+ P2)+ -)+ P1, RID := f_sha1((((((r3+ trustEvent)+ P1)+ P2)+ trustPath)+ P2)+ P1), HVID := f_sha1((mutualTrustPath+ P1)+ P2), BVID1 := f_sha1((trustEvent+ P1)+ P2), BVID2 := f_sha1((trustPath+ P2)+ P1).
ECA Rule r3_2_eca ACTION_ADD<mutualTrustPath(@Local, P1, P2, R)> :- EVENT_RECV<emutualTrustPath(@Local, P1, P2, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)>.
ECA Rule r3_3_eca ACTION_LOCAL_SEND<insertProvEdge(@Local, HVID, RID, HC, RC)> :- EVENT_RECV<emutualTrustPath(@Local, P1, P2, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)>.
ECA Rule r3_4_eca ACTION_LOCAL_SEND<insertRuleEdge(@Local, RID, BVID1, RC, BC1)> :- EVENT_RECV<emutualTrustPath(@Local, P1, P2, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)>.
ECA Rule r3_5_eca ACTION_LOCAL_SEND<insertRuleEdge(@Local, RID, BVID2, RC, BC2)> :- EVENT_RECV<emutualTrustPath(@Local, P1, P2, RID, HVID, BVID1, BVID2, RC, HC, BC1, BC2, R)>.
ECA Rule re_1_eca ACTION_LOCAL_SEND<provEdgeCount(@Local, HVID, RID, HC, RC, count< * >)> :- EVENT_RECV<insertProvEdge(@Local, HVID, RID, HC, RC)>, provEdge(@Local, HVID, RID, HC, RC, N).
ECA Rule re_2_eca ACTION_ADD<provEdge(@Local, HVID, RID, HC, RC, N)> :- EVENT_RECV<provEdgeCount(@Local, HVID, RID, HC, RC, C)>, C == 0, N := 1.
ECA Rule re_3_eca ACTION_ADD<provEdge(@Local, HVID, RID, HC, RC, N1)> :- EVENT_RECV<provEdgeCount(@Local, HVID, RID, HC, RC, C)>, provEdge(@Local, HVID, RID, HC, RC, N), C > 0, N1 := N+ 1.
ECA Rule re_4_eca ACTION_LOCAL_SEND<ruleEdgeCount(@Local, RID, BVID, RC, BC, count< * >)> :- EVENT_RECV<insertRuleEdge(@Local, RID, BVID, RC, BC)>, ruleEdge(@Local, RID, BVID, RC, BC, N).
ECA Rule re_5_eca ACTION_ADD<ruleEdge(@Local, RID, BVID, RC, BC, N)> :- EVENT_RECV<ruleEdgeCount(@Local, RID, BVID, RC, BC, C)>, C == 0, N := 1.
ECA Rule re_6_eca ACTION_ADD<ruleEdge(@Local, RID, BVID, RC, BC, N1)> :- EVENT_RECV<ruleEdgeCount(@Local, RID, BVID, RC, BC, C)>, ruleEdge(@Local, RID, BVID, RC, BC, N), C > 0, N1 := N+ 1.
