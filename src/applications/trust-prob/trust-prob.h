/* A RapidNet application. Generated by RapidNet compiler. */

#ifndef TRUSTPROB_H
#define TRUSTPROB_H

#include <string>
#include <iostream>
#include "ns3/ptr.h"
#include "ns3/event-id.h"
#include "ns3/ipv4-address.h"
#include "ns3/rapidnet-header.h"
#include "ns3/relation-base.h"
#include "ns3/database.h"
#include "ns3/rapidnet-application-base.h"
#include "ns3/aggregator.h"
#include "ns3/aggwrap.h"

using namespace std;
using namespace ns3;

namespace ns3 {

class Socket;
class Packet;

namespace rapidnet {
namespace trustprob {

class TrustProb : public RapidNetApplicationBase
{
public:
  static const string EMUTUALTRUSTPATH;
  static const string ETRUSTEVENT;
  static const string ETRUSTPATH;
  static const string ETRUSTPATHR2;
  static const string INSERTPROVEDGE;
  static const string INSERTRULEEDGE;
  static const string MUTUALTRUSTPATH;
  static const string PROVEDGE;
  static const string PROVEDGECOUNT;
  static const string RULEEDGE;
  static const string RULEEDGECOUNT;
  static const string TRUST;
  static const string TRUSTEVENT;
  static const string TRUSTPATH;

  static TypeId GetTypeId (void);

  TrustProb ();

  virtual ~TrustProb ();

protected:

  virtual void DoDispose (void);

  virtual void StartApplication (void);

  virtual void StopApplication (void);

  virtual void InitDatabase (void);

  virtual void DemuxRecv (Ptr<Tuple> tuple);

  virtual void Ra_1Eca0Ins (Ptr<Tuple> trustPath);

  virtual void Ra_2_eca (Ptr<Tuple> etrustEvent);

  virtual void Ra_3_eca (Ptr<Tuple> etrustEvent);

  virtual void Ra_4_eca (Ptr<Tuple> etrustEvent);

  virtual void R1_1Eca0Ins (Ptr<Tuple> trust);

  virtual void R1_2_eca (Ptr<Tuple> etrustPath);

  virtual void R1_3_eca (Ptr<Tuple> etrustPath);

  virtual void R1_4_eca (Ptr<Tuple> etrustPath);

  virtual void R2_1Eca0Ins (Ptr<Tuple> trust);

  virtual void R2_1Eca1Ins (Ptr<Tuple> trustPath);

  virtual void R2_2_eca (Ptr<Tuple> etrustPathR2);

  virtual void R2_3_eca (Ptr<Tuple> etrustPathR2);

  virtual void R2_4_eca (Ptr<Tuple> etrustPathR2);

  virtual void R2_5_eca (Ptr<Tuple> etrustPathR2);

  virtual void R3_1Eca0Ins (Ptr<Tuple> trustEvent);

  virtual void R3_1Eca1Ins (Ptr<Tuple> trustPath);

  virtual void R3_2_eca (Ptr<Tuple> emutualTrustPath);

  virtual void R3_3_eca (Ptr<Tuple> emutualTrustPath);

  virtual void R3_4_eca (Ptr<Tuple> emutualTrustPath);

  virtual void R3_5_eca (Ptr<Tuple> emutualTrustPath);

  virtual void Re_1_eca (Ptr<Tuple> insertProvEdge);

  virtual void Re_2_eca (Ptr<Tuple> provEdgeCount);

  virtual void Re_3_eca (Ptr<Tuple> provEdgeCount);

  virtual void Re_4_eca (Ptr<Tuple> insertRuleEdge);

  virtual void Re_5_eca (Ptr<Tuple> ruleEdgeCount);

  virtual void Re_6_eca (Ptr<Tuple> ruleEdgeCount);

};

} // namespace trustprob
} // namespace rapidnet
} // namespace ns3

#endif // TRUSTPROB_H
