/* A RapidNet application. Generated by RapidNet compiler. */

#include "trust-prob.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::trustprob;

const string TrustProb::EMUTUALTRUSTPATH = "emutualTrustPath";
const string TrustProb::ETRUSTEVENT = "etrustEvent";
const string TrustProb::ETRUSTPATH = "etrustPath";
const string TrustProb::ETRUSTPATHR2 = "etrustPathR2";
const string TrustProb::INSERTPROVEDGE = "insertProvEdge";
const string TrustProb::INSERTRULEEDGE = "insertRuleEdge";
const string TrustProb::MUTUALTRUSTPATH = "mutualTrustPath";
const string TrustProb::PROVEDGE = "provEdge";
const string TrustProb::PROVEDGECOUNT = "provEdgeCount";
const string TrustProb::RULEEDGE = "ruleEdge";
const string TrustProb::RULEEDGECOUNT = "ruleEdgeCount";
const string TrustProb::TRUST = "trust";
const string TrustProb::TRUSTEVENT = "trustEvent";
const string TrustProb::TRUSTPATH = "trustPath";

NS_LOG_COMPONENT_DEFINE ("TrustProb");
NS_OBJECT_ENSURE_REGISTERED (TrustProb);

TypeId
TrustProb::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::trustprob::TrustProb")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<TrustProb> ()
    ;
  return tid;
}

TrustProb::TrustProb()
{
  NS_LOG_FUNCTION_NOARGS ();
}

TrustProb::~TrustProb()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
TrustProb::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
TrustProb::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("TrustProb Application Started");
}

void
TrustProb::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("TrustProb Application Stopped");
}

void
TrustProb::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (MUTUALTRUSTPATH, attrdeflist (
    attrdef ("mutualTrustPath_attr1", IPV4),
    attrdef ("mutualTrustPath_attr2", INT32),
    attrdef ("mutualTrustPath_attr3", INT32),
    attrdef ("mutualTrustPath_attr4", INT32)));

  AddRelationWithKeys (PROVEDGE, attrdeflist (
    attrdef ("provEdge_attr1", IPV4),
    attrdef ("provEdge_attr2", IPV4),
    attrdef ("provEdge_attr3", IPV4)));

  AddRelationWithKeys (RULEEDGE, attrdeflist (
    attrdef ("ruleEdge_attr1", IPV4),
    attrdef ("ruleEdge_attr2", IPV4),
    attrdef ("ruleEdge_attr3", IPV4)));

  AddRelationWithKeys (TRUST, attrdeflist (
    attrdef ("trust_attr1", IPV4),
    attrdef ("trust_attr2", INT32),
    attrdef ("trust_attr3", INT32),
    attrdef ("trust_attr4", INT32)));

  AddRelationWithKeys (TRUSTEVENT, attrdeflist (
    attrdef ("trustEvent_attr1", IPV4),
    attrdef ("trustEvent_attr2", INT32),
    attrdef ("trustEvent_attr3", INT32),
    attrdef ("trustEvent_attr4", INT32)));

  AddRelationWithKeys (TRUSTPATH, attrdeflist (
    attrdef ("trustPath_attr1", IPV4),
    attrdef ("trustPath_attr2", INT32),
    attrdef ("trustPath_attr3", INT32),
    attrdef ("trustPath_attr4", INT32)));

}

void
TrustProb::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, TRUSTPATH))
    {
      Ra_1Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENT))
    {
      Ra_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENT))
    {
      Ra_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENT))
    {
      Ra_4_eca (tuple);
    }
  if (IsInsertEvent (tuple, TRUST))
    {
      R1_1Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATH))
    {
      R1_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATH))
    {
      R1_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATH))
    {
      R1_4_eca (tuple);
    }
  if (IsInsertEvent (tuple, TRUST))
    {
      R2_1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, TRUSTPATH))
    {
      R2_1Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHR2))
    {
      R2_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHR2))
    {
      R2_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHR2))
    {
      R2_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHR2))
    {
      R2_5_eca (tuple);
    }
  if (IsInsertEvent (tuple, TRUSTEVENT))
    {
      R3_1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, TRUSTPATH))
    {
      R3_1Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATH))
    {
      R3_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATH))
    {
      R3_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATH))
    {
      R3_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATH))
    {
      R3_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, INSERTPROVEDGE))
    {
      Re_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVEDGECOUNT))
    {
      Re_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVEDGECOUNT))
    {
      Re_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, INSERTRULEEDGE))
    {
      Re_4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEEDGECOUNT))
    {
      Re_5_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEEDGECOUNT))
    {
      Re_6_eca (tuple);
    }
}

void
TrustProb::Ra_1Eca0Ins (Ptr<Tuple> trustPath)
{
  RAPIDNET_LOG_INFO ("Ra_1Eca0Ins triggered");

  Ptr<Tuple> result = trustPath;

  result->Assign (Assignor::New ("RC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("ra_trustPath_")),
          VarExpr::New ("trustPath_attr2")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("HC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustEvent")),
          VarExpr::New ("trustPath_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("BC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trustPath_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("ra")),
            ValueExpr::New (StrValue::New ("trustPath"))),
          VarExpr::New ("trustPath_attr2")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustEvent")),
          VarExpr::New ("trustPath_attr2")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("BVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trustPath_attr2")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTEVENT,
    strlist ("Local",
      "trustPath_attr2",
      "trustPath_attr3",
      "RID",
      "HVID",
      "BVID",
      "RC",
      "HC",
      "BC",
      "trustPath_attr4"),
    strlist ("etrustEvent_attr1",
      "etrustEvent_attr2",
      "etrustEvent_attr3",
      "etrustEvent_attr4",
      "etrustEvent_attr5",
      "etrustEvent_attr6",
      "etrustEvent_attr7",
      "etrustEvent_attr8",
      "etrustEvent_attr9",
      "etrustEvent_attr10"));

  SendLocal (result);
}

void
TrustProb::Ra_2_eca (Ptr<Tuple> etrustEvent)
{
  RAPIDNET_LOG_INFO ("Ra_2_eca triggered");

  Ptr<Tuple> result = etrustEvent;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    TRUSTEVENT,
    strlist ("Local",
      "etrustEvent_attr2",
      "etrustEvent_attr3",
      "etrustEvent_attr10"),
    strlist ("trustEvent_attr1",
      "trustEvent_attr2",
      "trustEvent_attr3",
      "trustEvent_attr4"));

  Insert (result);
}

void
TrustProb::Ra_3_eca (Ptr<Tuple> etrustEvent)
{
  RAPIDNET_LOG_INFO ("Ra_3_eca triggered");

  Ptr<Tuple> result = etrustEvent;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTPROVEDGE,
    strlist ("Local",
      "etrustEvent_attr5",
      "etrustEvent_attr4",
      "etrustEvent_attr8",
      "etrustEvent_attr7"),
    strlist ("insertProvEdge_attr1",
      "insertProvEdge_attr2",
      "insertProvEdge_attr3",
      "insertProvEdge_attr4",
      "insertProvEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::Ra_4_eca (Ptr<Tuple> etrustEvent)
{
  RAPIDNET_LOG_INFO ("Ra_4_eca triggered");

  Ptr<Tuple> result = etrustEvent;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTRULEEDGE,
    strlist ("Local",
      "etrustEvent_attr4",
      "etrustEvent_attr6",
      "etrustEvent_attr7",
      "etrustEvent_attr9"),
    strlist ("insertRuleEdge_attr1",
      "insertRuleEdge_attr2",
      "insertRuleEdge_attr3",
      "insertRuleEdge_attr4",
      "insertRuleEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::R1_1Eca0Ins (Ptr<Tuple> trust)
{
  RAPIDNET_LOG_INFO ("R1_1Eca0Ins triggered");

  Ptr<Tuple> result = trust;

  result->Assign (Assignor::New ("RC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("r1_trust_")),
          VarExpr::New ("trust_attr2")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("trust_attr3"))));

  result->Assign (Assignor::New ("HC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trust_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trust_attr3"))));

  result->Assign (Assignor::New ("BC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trust")),
          VarExpr::New ("trust_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trust_attr3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("r1")),
            ValueExpr::New (StrValue::New ("trust"))),
          VarExpr::New ("trust_attr2")),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trust_attr2")),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("BVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trust")),
          VarExpr::New ("trust_attr2")),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTPATH,
    strlist ("Local",
      "trust_attr2",
      "trust_attr3",
      "RID",
      "HVID",
      "BVID",
      "RC",
      "HC",
      "BC",
      "trust_attr4"),
    strlist ("etrustPath_attr1",
      "etrustPath_attr2",
      "etrustPath_attr3",
      "etrustPath_attr4",
      "etrustPath_attr5",
      "etrustPath_attr6",
      "etrustPath_attr7",
      "etrustPath_attr8",
      "etrustPath_attr9",
      "etrustPath_attr10"));

  SendLocal (result);
}

void
TrustProb::R1_2_eca (Ptr<Tuple> etrustPath)
{
  RAPIDNET_LOG_INFO ("R1_2_eca triggered");

  Ptr<Tuple> result = etrustPath;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    TRUSTPATH,
    strlist ("Local",
      "etrustPath_attr2",
      "etrustPath_attr3",
      "etrustPath_attr10"),
    strlist ("trustPath_attr1",
      "trustPath_attr2",
      "trustPath_attr3",
      "trustPath_attr4"));

  Insert (result);
}

void
TrustProb::R1_3_eca (Ptr<Tuple> etrustPath)
{
  RAPIDNET_LOG_INFO ("R1_3_eca triggered");

  Ptr<Tuple> result = etrustPath;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTPROVEDGE,
    strlist ("Local",
      "etrustPath_attr5",
      "etrustPath_attr4",
      "etrustPath_attr8",
      "etrustPath_attr7"),
    strlist ("insertProvEdge_attr1",
      "insertProvEdge_attr2",
      "insertProvEdge_attr3",
      "insertProvEdge_attr4",
      "insertProvEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::R1_4_eca (Ptr<Tuple> etrustPath)
{
  RAPIDNET_LOG_INFO ("R1_4_eca triggered");

  Ptr<Tuple> result = etrustPath;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTRULEEDGE,
    strlist ("Local",
      "etrustPath_attr4",
      "etrustPath_attr6",
      "etrustPath_attr7",
      "etrustPath_attr9"),
    strlist ("insertRuleEdge_attr1",
      "insertRuleEdge_attr2",
      "insertRuleEdge_attr3",
      "insertRuleEdge_attr4",
      "insertRuleEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::R2_1Eca0Ins (Ptr<Tuple> trust)
{
  RAPIDNET_LOG_INFO ("R2_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTPATH)->Join (
    trust,
    strlist ("trustPath_attr1", "trustPath_attr2", "trustPath_attr4"),
    strlist ("trust_attr1", "trust_attr3", "trust_attr4"));

  result->Assign (Assignor::New ("RC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("r2_trust_")),
                  VarExpr::New ("trust_attr2")),
                ValueExpr::New (StrValue::New ("_"))),
              VarExpr::New ("trust_attr3")),
            ValueExpr::New (StrValue::New ("_trustPath_"))),
          VarExpr::New ("trust_attr3")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("HC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trust_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("BC1",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trust")),
          VarExpr::New ("trust_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trust_attr3"))));

  result->Assign (Assignor::New ("BC2",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trust_attr3")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("r2")),
                  ValueExpr::New (StrValue::New ("trust"))),
                VarExpr::New ("trust_attr2")),
              VarExpr::New ("trust_attr3")),
            ValueExpr::New (StrValue::New ("trustPath"))),
          VarExpr::New ("trust_attr3")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trust_attr2")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("BVID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trust")),
          VarExpr::New ("trust_attr2")),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("BVID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trust_attr3")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("trust_attr2"),
      VarExpr::New ("trustPath_attr3"))));

  result = result->Project (
    ETRUSTPATHR2,
    strlist ("Local",
      "trust_attr2",
      "trustPath_attr3",
      "RID",
      "HVID",
      "BVID1",
      "BVID2",
      "RC",
      "HC",
      "BC1",
      "BC2",
      "trust_attr4"),
    strlist ("etrustPathR2_attr1",
      "etrustPathR2_attr2",
      "etrustPathR2_attr3",
      "etrustPathR2_attr4",
      "etrustPathR2_attr5",
      "etrustPathR2_attr6",
      "etrustPathR2_attr7",
      "etrustPathR2_attr8",
      "etrustPathR2_attr9",
      "etrustPathR2_attr10",
      "etrustPathR2_attr11",
      "etrustPathR2_attr12"));

  SendLocal (result);
}

void
TrustProb::R2_1Eca1Ins (Ptr<Tuple> trustPath)
{
  RAPIDNET_LOG_INFO ("R2_1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUST)->Join (
    trustPath,
    strlist ("trust_attr1", "trust_attr3", "trust_attr4"),
    strlist ("trustPath_attr1", "trustPath_attr2", "trustPath_attr4"));

  result->Assign (Assignor::New ("RC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("r2_trust_")),
                  VarExpr::New ("trust_attr2")),
                ValueExpr::New (StrValue::New ("_"))),
              VarExpr::New ("trustPath_attr2")),
            ValueExpr::New (StrValue::New ("_trustPath_"))),
          VarExpr::New ("trustPath_attr2")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("HC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trust_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("BC1",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trust")),
          VarExpr::New ("trust_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr2"))));

  result->Assign (Assignor::New ("BC2",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trustPath_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("r2")),
                  ValueExpr::New (StrValue::New ("trust"))),
                VarExpr::New ("trust_attr2")),
              VarExpr::New ("trustPath_attr2")),
            ValueExpr::New (StrValue::New ("trustPath"))),
          VarExpr::New ("trustPath_attr2")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trust_attr2")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("BVID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trust")),
          VarExpr::New ("trust_attr2")),
        VarExpr::New ("trustPath_attr2")))));

  result->Assign (Assignor::New ("BVID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trustPath_attr2")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("trust_attr2"),
      VarExpr::New ("trustPath_attr3"))));

  result = result->Project (
    ETRUSTPATHR2,
    strlist ("Local",
      "trust_attr2",
      "trustPath_attr3",
      "RID",
      "HVID",
      "BVID1",
      "BVID2",
      "RC",
      "HC",
      "BC1",
      "BC2",
      "trustPath_attr4"),
    strlist ("etrustPathR2_attr1",
      "etrustPathR2_attr2",
      "etrustPathR2_attr3",
      "etrustPathR2_attr4",
      "etrustPathR2_attr5",
      "etrustPathR2_attr6",
      "etrustPathR2_attr7",
      "etrustPathR2_attr8",
      "etrustPathR2_attr9",
      "etrustPathR2_attr10",
      "etrustPathR2_attr11",
      "etrustPathR2_attr12"));

  SendLocal (result);
}

void
TrustProb::R2_2_eca (Ptr<Tuple> etrustPathR2)
{
  RAPIDNET_LOG_INFO ("R2_2_eca triggered");

  Ptr<Tuple> result = etrustPathR2;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    TRUSTPATH,
    strlist ("Local",
      "etrustPathR2_attr2",
      "etrustPathR2_attr3",
      "etrustPathR2_attr12"),
    strlist ("trustPath_attr1",
      "trustPath_attr2",
      "trustPath_attr3",
      "trustPath_attr4"));

  Insert (result);
}

void
TrustProb::R2_3_eca (Ptr<Tuple> etrustPathR2)
{
  RAPIDNET_LOG_INFO ("R2_3_eca triggered");

  Ptr<Tuple> result = etrustPathR2;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTPROVEDGE,
    strlist ("Local",
      "etrustPathR2_attr5",
      "etrustPathR2_attr4",
      "etrustPathR2_attr9",
      "etrustPathR2_attr8"),
    strlist ("insertProvEdge_attr1",
      "insertProvEdge_attr2",
      "insertProvEdge_attr3",
      "insertProvEdge_attr4",
      "insertProvEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::R2_4_eca (Ptr<Tuple> etrustPathR2)
{
  RAPIDNET_LOG_INFO ("R2_4_eca triggered");

  Ptr<Tuple> result = etrustPathR2;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTRULEEDGE,
    strlist ("Local",
      "etrustPathR2_attr4",
      "etrustPathR2_attr6",
      "etrustPathR2_attr8",
      "etrustPathR2_attr10"),
    strlist ("insertRuleEdge_attr1",
      "insertRuleEdge_attr2",
      "insertRuleEdge_attr3",
      "insertRuleEdge_attr4",
      "insertRuleEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::R2_5_eca (Ptr<Tuple> etrustPathR2)
{
  RAPIDNET_LOG_INFO ("R2_5_eca triggered");

  Ptr<Tuple> result = etrustPathR2;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTRULEEDGE,
    strlist ("Local",
      "etrustPathR2_attr4",
      "etrustPathR2_attr7",
      "etrustPathR2_attr8",
      "etrustPathR2_attr11"),
    strlist ("insertRuleEdge_attr1",
      "insertRuleEdge_attr2",
      "insertRuleEdge_attr3",
      "insertRuleEdge_attr4",
      "insertRuleEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::R3_1Eca0Ins (Ptr<Tuple> trustEvent)
{
  RAPIDNET_LOG_INFO ("R3_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTPATH)->Join (
    trustEvent,
    strlist ("trustPath_attr1", "trustPath_attr3", "trustPath_attr2", "trustPath_attr4"),
    strlist ("trustEvent_attr1", "trustEvent_attr2", "trustEvent_attr3", "trustEvent_attr4"));

  result->Assign (Assignor::New ("RC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("r3_trustEvent_")),
                  VarExpr::New ("trustEvent_attr2")),
                ValueExpr::New (StrValue::New ("_"))),
              VarExpr::New ("trustEvent_attr3")),
            ValueExpr::New (StrValue::New ("_trustPath_"))),
          VarExpr::New ("trustEvent_attr3")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("trustEvent_attr2"))));

  result->Assign (Assignor::New ("HC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("mutualTrustPath")),
          VarExpr::New ("trustEvent_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustEvent_attr3"))));

  result->Assign (Assignor::New ("BC1",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustEvent")),
          VarExpr::New ("trustEvent_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustEvent_attr3"))));

  result->Assign (Assignor::New ("BC2",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trustEvent_attr3")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustEvent_attr2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("r3")),
                  ValueExpr::New (StrValue::New ("trustEvent"))),
                VarExpr::New ("trustEvent_attr2")),
              VarExpr::New ("trustEvent_attr3")),
            ValueExpr::New (StrValue::New ("trustPath"))),
          VarExpr::New ("trustEvent_attr3")),
        VarExpr::New ("trustEvent_attr2")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("mutualTrustPath")),
          VarExpr::New ("trustEvent_attr2")),
        VarExpr::New ("trustEvent_attr3")))));

  result->Assign (Assignor::New ("BVID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustEvent")),
          VarExpr::New ("trustEvent_attr2")),
        VarExpr::New ("trustEvent_attr3")))));

  result->Assign (Assignor::New ("BVID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trustEvent_attr3")),
        VarExpr::New ("trustEvent_attr2")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EMUTUALTRUSTPATH,
    strlist ("Local",
      "trustEvent_attr2",
      "trustEvent_attr3",
      "RID",
      "HVID",
      "BVID1",
      "BVID2",
      "RC",
      "HC",
      "BC1",
      "BC2",
      "trustEvent_attr4"),
    strlist ("emutualTrustPath_attr1",
      "emutualTrustPath_attr2",
      "emutualTrustPath_attr3",
      "emutualTrustPath_attr4",
      "emutualTrustPath_attr5",
      "emutualTrustPath_attr6",
      "emutualTrustPath_attr7",
      "emutualTrustPath_attr8",
      "emutualTrustPath_attr9",
      "emutualTrustPath_attr10",
      "emutualTrustPath_attr11",
      "emutualTrustPath_attr12"));

  SendLocal (result);
}

void
TrustProb::R3_1Eca1Ins (Ptr<Tuple> trustPath)
{
  RAPIDNET_LOG_INFO ("R3_1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTEVENT)->Join (
    trustPath,
    strlist ("trustEvent_attr1", "trustEvent_attr2", "trustEvent_attr3", "trustEvent_attr4"),
    strlist ("trustPath_attr1", "trustPath_attr3", "trustPath_attr2", "trustPath_attr4"));

  result->Assign (Assignor::New ("RC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("r3_trustEvent_")),
                  VarExpr::New ("trustPath_attr3")),
                ValueExpr::New (StrValue::New ("_"))),
              VarExpr::New ("trustPath_attr2")),
            ValueExpr::New (StrValue::New ("_trustPath_"))),
          VarExpr::New ("trustPath_attr2")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("HC",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("mutualTrustPath")),
          VarExpr::New ("trustPath_attr3")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr2"))));

  result->Assign (Assignor::New ("BC1",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustEvent")),
          VarExpr::New ("trustPath_attr3")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr2"))));

  result->Assign (Assignor::New ("BC2",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trustPath_attr2")),
        ValueExpr::New (StrValue::New ("-"))),
      VarExpr::New ("trustPath_attr3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("r3")),
                  ValueExpr::New (StrValue::New ("trustEvent"))),
                VarExpr::New ("trustPath_attr3")),
              VarExpr::New ("trustPath_attr2")),
            ValueExpr::New (StrValue::New ("trustPath"))),
          VarExpr::New ("trustPath_attr2")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("mutualTrustPath")),
          VarExpr::New ("trustPath_attr3")),
        VarExpr::New ("trustPath_attr2")))));

  result->Assign (Assignor::New ("BVID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustEvent")),
          VarExpr::New ("trustPath_attr3")),
        VarExpr::New ("trustPath_attr2")))));

  result->Assign (Assignor::New ("BVID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("trustPath")),
          VarExpr::New ("trustPath_attr2")),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EMUTUALTRUSTPATH,
    strlist ("Local",
      "trustPath_attr3",
      "trustPath_attr2",
      "RID",
      "HVID",
      "BVID1",
      "BVID2",
      "RC",
      "HC",
      "BC1",
      "BC2",
      "trustPath_attr4"),
    strlist ("emutualTrustPath_attr1",
      "emutualTrustPath_attr2",
      "emutualTrustPath_attr3",
      "emutualTrustPath_attr4",
      "emutualTrustPath_attr5",
      "emutualTrustPath_attr6",
      "emutualTrustPath_attr7",
      "emutualTrustPath_attr8",
      "emutualTrustPath_attr9",
      "emutualTrustPath_attr10",
      "emutualTrustPath_attr11",
      "emutualTrustPath_attr12"));

  SendLocal (result);
}

void
TrustProb::R3_2_eca (Ptr<Tuple> emutualTrustPath)
{
  RAPIDNET_LOG_INFO ("R3_2_eca triggered");

  Ptr<Tuple> result = emutualTrustPath;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    MUTUALTRUSTPATH,
    strlist ("Local",
      "emutualTrustPath_attr2",
      "emutualTrustPath_attr3",
      "emutualTrustPath_attr12"),
    strlist ("mutualTrustPath_attr1",
      "mutualTrustPath_attr2",
      "mutualTrustPath_attr3",
      "mutualTrustPath_attr4"));

  Insert (result);
}

void
TrustProb::R3_3_eca (Ptr<Tuple> emutualTrustPath)
{
  RAPIDNET_LOG_INFO ("R3_3_eca triggered");

  Ptr<Tuple> result = emutualTrustPath;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTPROVEDGE,
    strlist ("Local",
      "emutualTrustPath_attr5",
      "emutualTrustPath_attr4",
      "emutualTrustPath_attr9",
      "emutualTrustPath_attr8"),
    strlist ("insertProvEdge_attr1",
      "insertProvEdge_attr2",
      "insertProvEdge_attr3",
      "insertProvEdge_attr4",
      "insertProvEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::R3_4_eca (Ptr<Tuple> emutualTrustPath)
{
  RAPIDNET_LOG_INFO ("R3_4_eca triggered");

  Ptr<Tuple> result = emutualTrustPath;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTRULEEDGE,
    strlist ("Local",
      "emutualTrustPath_attr4",
      "emutualTrustPath_attr6",
      "emutualTrustPath_attr8",
      "emutualTrustPath_attr10"),
    strlist ("insertRuleEdge_attr1",
      "insertRuleEdge_attr2",
      "insertRuleEdge_attr3",
      "insertRuleEdge_attr4",
      "insertRuleEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::R3_5_eca (Ptr<Tuple> emutualTrustPath)
{
  RAPIDNET_LOG_INFO ("R3_5_eca triggered");

  Ptr<Tuple> result = emutualTrustPath;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTRULEEDGE,
    strlist ("Local",
      "emutualTrustPath_attr4",
      "emutualTrustPath_attr7",
      "emutualTrustPath_attr8",
      "emutualTrustPath_attr11"),
    strlist ("insertRuleEdge_attr1",
      "insertRuleEdge_attr2",
      "insertRuleEdge_attr3",
      "insertRuleEdge_attr4",
      "insertRuleEdge_attr5"));

  SendLocal (result);
}

void
TrustProb::Re_1_eca (Ptr<Tuple> insertProvEdge)
{
  RAPIDNET_LOG_INFO ("Re_1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVEDGE)->Join (
    insertProvEdge,
    strlist ("provEdge_attr4", "provEdge_attr2", "provEdge_attr1", "provEdge_attr5", "provEdge_attr3"),
    strlist ("insertProvEdge_attr4", "insertProvEdge_attr2", "insertProvEdge_attr1", "insertProvEdge_attr5", "insertProvEdge_attr3"));


  result = AggWrapCount::New ()->Compute (result, insertProvEdge);

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));
  result = result->Project (
    PROVEDGECOUNT,
    strlist ("Local",
      "insertProvEdge_attr2",
      "insertProvEdge_attr3",
      "insertProvEdge_attr4",
      "insertProvEdge_attr5",
      "count"),
    strlist ("provEdgeCount_attr1",
      "provEdgeCount_attr2",
      "provEdgeCount_attr3",
      "provEdgeCount_attr4",
      "provEdgeCount_attr5",
      "provEdgeCount_attr6"));

  SendLocal (result);
}

void
TrustProb::Re_2_eca (Ptr<Tuple> provEdgeCount)
{
  RAPIDNET_LOG_INFO ("Re_2_eca triggered");

  Ptr<Tuple> result = provEdgeCount;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("provEdgeCount_attr6"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PROVEDGE,
    strlist ("Local",
      "provEdgeCount_attr2",
      "provEdgeCount_attr3",
      "provEdgeCount_attr4",
      "provEdgeCount_attr5",
      "N"),
    strlist ("provEdge_attr1",
      "provEdge_attr2",
      "provEdge_attr3",
      "provEdge_attr4",
      "provEdge_attr5",
      "provEdge_attr6"));

  Insert (result);
}

void
TrustProb::Re_3_eca (Ptr<Tuple> provEdgeCount)
{
  RAPIDNET_LOG_INFO ("Re_3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROVEDGE)->Join (
    provEdgeCount,
    strlist ("provEdge_attr4", "provEdge_attr2", "provEdge_attr1", "provEdge_attr5", "provEdge_attr3"),
    strlist ("provEdgeCount_attr4", "provEdgeCount_attr2", "provEdgeCount_attr1", "provEdgeCount_attr5", "provEdgeCount_attr3"));

  result->Assign (Assignor::New ("N1",
    Operation::New (RN_PLUS,
      VarExpr::New ("provEdge_attr6"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("provEdgeCount_attr6"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PROVEDGE,
    strlist ("Local",
      "provEdgeCount_attr2",
      "provEdgeCount_attr3",
      "provEdgeCount_attr4",
      "provEdgeCount_attr5",
      "N1"),
    strlist ("provEdge_attr1",
      "provEdge_attr2",
      "provEdge_attr3",
      "provEdge_attr4",
      "provEdge_attr5",
      "provEdge_attr6"));

  Insert (result);
}

void
TrustProb::Re_4_eca (Ptr<Tuple> insertRuleEdge)
{
  RAPIDNET_LOG_INFO ("Re_4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEDGE)->Join (
    insertRuleEdge,
    strlist ("ruleEdge_attr5", "ruleEdge_attr3", "ruleEdge_attr1", "ruleEdge_attr4", "ruleEdge_attr2"),
    strlist ("insertRuleEdge_attr5", "insertRuleEdge_attr3", "insertRuleEdge_attr1", "insertRuleEdge_attr4", "insertRuleEdge_attr2"));


  result = AggWrapCount::New ()->Compute (result, insertRuleEdge);

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));
  result = result->Project (
    RULEEDGECOUNT,
    strlist ("Local",
      "insertRuleEdge_attr2",
      "insertRuleEdge_attr3",
      "insertRuleEdge_attr4",
      "insertRuleEdge_attr5",
      "count"),
    strlist ("ruleEdgeCount_attr1",
      "ruleEdgeCount_attr2",
      "ruleEdgeCount_attr3",
      "ruleEdgeCount_attr4",
      "ruleEdgeCount_attr5",
      "ruleEdgeCount_attr6"));

  SendLocal (result);
}

void
TrustProb::Re_5_eca (Ptr<Tuple> ruleEdgeCount)
{
  RAPIDNET_LOG_INFO ("Re_5_eca triggered");

  Ptr<Tuple> result = ruleEdgeCount;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("ruleEdgeCount_attr6"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEDGE,
    strlist ("Local",
      "ruleEdgeCount_attr2",
      "ruleEdgeCount_attr3",
      "ruleEdgeCount_attr4",
      "ruleEdgeCount_attr5",
      "N"),
    strlist ("ruleEdge_attr1",
      "ruleEdge_attr2",
      "ruleEdge_attr3",
      "ruleEdge_attr4",
      "ruleEdge_attr5",
      "ruleEdge_attr6"));

  Insert (result);
}

void
TrustProb::Re_6_eca (Ptr<Tuple> ruleEdgeCount)
{
  RAPIDNET_LOG_INFO ("Re_6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEDGE)->Join (
    ruleEdgeCount,
    strlist ("ruleEdge_attr5", "ruleEdge_attr3", "ruleEdge_attr1", "ruleEdge_attr4", "ruleEdge_attr2"),
    strlist ("ruleEdgeCount_attr5", "ruleEdgeCount_attr3", "ruleEdgeCount_attr1", "ruleEdgeCount_attr4", "ruleEdgeCount_attr2"));

  result->Assign (Assignor::New ("N1",
    Operation::New (RN_PLUS,
      VarExpr::New ("ruleEdge_attr6"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("ruleEdgeCount_attr6"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    RULEEDGE,
    strlist ("Local",
      "ruleEdgeCount_attr2",
      "ruleEdgeCount_attr3",
      "ruleEdgeCount_attr4",
      "ruleEdgeCount_attr5",
      "N1"),
    strlist ("ruleEdge_attr1",
      "ruleEdge_attr2",
      "ruleEdge_attr3",
      "ruleEdge_attr4",
      "ruleEdge_attr5",
      "ruleEdge_attr6"));

  Insert (result);
}

