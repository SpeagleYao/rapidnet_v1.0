/* A RapidNet application. Generated by RapidNet compiler. */

#include "packet-forward.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::packetforward;

const string PacketForward::PACKET = "packet";
const string PacketForward::PACKETDELETE = "packetDelete";
const string PacketForward::R1PACKETSEND = "r1packetsend";
const string PacketForward::RECV = "recv";
const string PacketForward::ROUTE = "route";

NS_LOG_COMPONENT_DEFINE ("PacketForward");
NS_OBJECT_ENSURE_REGISTERED (PacketForward);

TypeId
PacketForward::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::packetforward::PacketForward")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PacketForward> ()
    ;
  return tid;
}

PacketForward::PacketForward()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PacketForward::~PacketForward()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PacketForward::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PacketForward::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PacketForward Application Started");
}

void
PacketForward::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PacketForward Application Stopped");
}

void
PacketForward::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (PACKET, attrdeflist (
    attrdef ("packet_attr1", IPV4),
    attrdef ("packet_attr2", IPV4),
    attrdef ("packet_attr3", IPV4),
    attrdef ("packet_attr4", IPV4)));

  AddRelationWithKeys (RECV, attrdeflist (
    attrdef ("recv_attr1", IPV4),
    attrdef ("recv_attr2", IPV4),
    attrdef ("recv_attr3", IPV4),
    attrdef ("recv_attr4", IPV4)));

  AddRelationWithKeys (ROUTE, attrdeflist (
    attrdef ("route_attr1", IPV4),
    attrdef ("route_attr2", IPV4),
    attrdef ("route_attr3", IPV4)));

}

void
PacketForward::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, R1PACKETSEND))
    {
      R1Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, PACKETDELETE))
    {
      R1Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, PACKET))
    {
      R1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, PACKET))
    {
      R1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, ROUTE))
    {
      R1Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, ROUTE))
    {
      R1Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, PACKET))
    {
      R2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, PACKET))
    {
      R2Eca0Del (tuple);
    }
}

void
PacketForward::R1Eca0RemoteIns (Ptr<Tuple> r1packetsend)
{
  RAPIDNET_LOG_INFO ("R1Eca0RemoteIns triggered");

  Ptr<Tuple> result = r1packetsend;

  result = result->Project (
    PACKET,
    strlist ("r1packetsend_attr1",
      "r1packetsend_attr2",
      "r1packetsend_attr3",
      "r1packetsend_attr4"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"));

  Insert (result);
}

void
PacketForward::R1Eca0RemoteDel (Ptr<Tuple> packetDelete)
{
  RAPIDNET_LOG_INFO ("R1Eca0RemoteDel triggered");

  Ptr<Tuple> result = packetDelete;

  result = result->Project (
    PACKET,
    strlist ("packetDelete_attr1",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4"),
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"));

  Delete (result);
}

void
PacketForward::R1Eca0Ins (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("R1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ROUTE)->Join (
    packet,
    strlist ("route_attr2", "route_attr1"),
    strlist ("packet_attr3", "packet_attr1"));

  result = result->Project (
    R1PACKETSEND,
    strlist ("route_attr3",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "route_attr3"),
    strlist ("r1packetsend_attr1",
      "r1packetsend_attr2",
      "r1packetsend_attr3",
      "r1packetsend_attr4",
      RN_DEST));

  Send (result);
}

void
PacketForward::R1Eca0Del (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("R1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ROUTE)->Join (
    packet,
    strlist ("route_attr2", "route_attr1"),
    strlist ("packet_attr3", "packet_attr1"));

  result = result->Project (
    PACKETDELETE,
    strlist ("route_attr3",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4",
      "route_attr3"),
    strlist ("packetDelete_attr1",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4",
      RN_DEST));

  Send (result);
}

void
PacketForward::R1Eca1Ins (Ptr<Tuple> route)
{
  RAPIDNET_LOG_INFO ("R1Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PACKET)->Join (
    route,
    strlist ("packet_attr3", "packet_attr1"),
    strlist ("route_attr2", "route_attr1"));

  result = result->Project (
    R1PACKETSEND,
    strlist ("route_attr3",
      "packet_attr2",
      "route_attr2",
      "packet_attr4",
      "route_attr3"),
    strlist ("r1packetsend_attr1",
      "r1packetsend_attr2",
      "r1packetsend_attr3",
      "r1packetsend_attr4",
      RN_DEST));

  Send (result);
}

void
PacketForward::R1Eca1Del (Ptr<Tuple> route)
{
  RAPIDNET_LOG_INFO ("R1Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PACKET)->Join (
    route,
    strlist ("packet_attr3", "packet_attr1"),
    strlist ("route_attr2", "route_attr1"));

  result = result->Project (
    PACKETDELETE,
    strlist ("route_attr3",
      "packet_attr2",
      "route_attr2",
      "packet_attr4",
      "route_attr3"),
    strlist ("packetDelete_attr1",
      "packetDelete_attr2",
      "packetDelete_attr3",
      "packetDelete_attr4",
      RN_DEST));

  Send (result);
}

void
PacketForward::R2Eca0Ins (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("R2Eca0Ins triggered");

  Ptr<Tuple> result = packet;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packet_attr3"),
      VarExpr::New ("packet_attr1"))));

  result = result->Project (
    RECV,
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"),
    strlist ("recv_attr1",
      "recv_attr2",
      "recv_attr3",
      "recv_attr4"));

  Insert (result);
}

void
PacketForward::R2Eca0Del (Ptr<Tuple> packet)
{
  RAPIDNET_LOG_INFO ("R2Eca0Del triggered");

  Ptr<Tuple> result = packet;

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("packet_attr3"),
      VarExpr::New ("packet_attr1"))));

  result = result->Project (
    RECV,
    strlist ("packet_attr1",
      "packet_attr2",
      "packet_attr3",
      "packet_attr4"),
    strlist ("recv_attr1",
      "recv_attr2",
      "recv_attr3",
      "recv_attr4"));

  Delete (result);
}

