materialize(packet, infinity, infinity, keys(1, 2, 3, 4)).
materialize(route, infinity, infinity, keys(1, 2, 3)).
materialize(recv, infinity, infinity, keys(1, 2, 3, 4)).

materialize(edge, infinity, infinity, keys(1, 2, 3)).
materialize(prov, infinity, infinity, keys(1, 2, 3)).


// r1 packet(@N, S, D, DT) :- packet(@L, S, D, DT), route(@L, D, N).
r1_1 epacket(@N, S, D, DT, L, RID, HVID, BVID) :- packet(@L, S, D, DT), route(@L, D, N),
					       PID1 := f_sha1("route"+L+D+N), PID := f_append(PID1), 
					       RID := f_sha1("r1"+N+PID), 
					       HVID := f_sha1("packet"+N+S+D),
					       BVID := f_sha1("packet"+L+S+D).
r1_2 packet(@N, S, D, DT) :- epacket(@N, S, D, DT, L, RID, HVID, BVID).
// r1_3 prov(@N, HVID, RID) :- epacket(@N, S, D, DT, L, RID, HVID, BVID).
r1_4 insertedge(@N, RID1, RID2) :- epacket(@N, S, D, DT, L, RID1, HVID, BVID), prov(@L, BVID, RID2).


// r2 recv(@L, S, D, DT) :- packet(@L, S, D, DT), D==L.
r2_1 erecv(@L, S, D, DT, RID, HVID, BVID) :- packet(@L, S, D, DT), D==L,
			    		     RID := f_sha1("r2"+L),
			    		     HVID := f_sha1("recv"+L+S+D),
					     BVID := f_sha1("packet"+L+S+D).
r2_2 recv(@L, S, D, DT) :- erecv(@L, S, D, DT, RID, HVID, BVID).
r2_3 prov(@L, HVID, RID) :- erecv(@L, S, D, DT, RID, HVID, BVID).
r2_4 insertedge(@L, RID1, RID2) :- erecv(@L, S, D, DT, RID1, HVID, BVID), prov(@L, BVID, RID2).


re_1 edgeCount(@Local, RID1, RID2, a_COUNT<*>) :- insertedge(@Local, RID1, RID2), edge(@Local, RID1, RID2, N).
re_2 edge(@Local, RID1, RID2, N) :- edgeCount(@Local, RID1, RID2, C), C == 0, N := 1.
re_3 edge(@Local, RID1, RID2, N1) :- edgeCount(@Local, RID1, RID2, C), edge(@Local, RID1, RID2, N), C > 0, N1 := N+1.
