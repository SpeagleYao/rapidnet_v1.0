materialize(packet, infinity, infinity, keys(1, 2, 3, 4)).
materialize(route, infinity, infinity, keys(1, 2, 3)).
materialize(recv, infinity, infinity, keys(1, 2, 3, 4)).

materialize(edge, infinity, infinity, keys(1, 2, 3)).
materialize(prov, infinity, infinity, keys(1, 2, 3)).


// r1 packet(@N, S, D, DT) :- packet(@L, S, D, DT), route(@L, D, N).
r1_1 epacket(@N, S, D, DT, L, RID, HVID, BVID, RContent) :- packet(@L, S, D, DT), route(@L, D, N),
					       PID1 := f_sha1("route"+L+S+D+N), PID := f_append(PID1), 
					       RID := f_sha1("r1"+N+PID), 
					       RContent := "r1_"+N+"_route_"+L+"_"+S+"_"+D,
					       HVID := f_sha1("packet"+N+S+D),
					       BVID := f_sha1("packet"+L+S+D).
r1_2 packet(@N, S, D, DT) :- epacket(@N, S, D, DT, L, RID, HVID, BVID, RContent).
r1_3 prov(@N, HVID, RID, RContent) :- epacket(@N, S, D, DT, L, RID, HVID, BVID, RContent).
r1_4 insertedge(@N, RID1, RID2, RContent1, RContent2) :- epacket(@N, S, D, DT, L, RID1, HVID, BVID, RContent1), prov(@L, BVID, RID2, RContent2).


// r2 recv(@L, S, D, DT) :- packet(@L, S, D, DT), D==L.
r2_1 erecv(@L, S, D, DT, RID, HVID, BVID, RContent) :- packet(@L, S, D, DT), D==L,
			    		     RID := f_sha1("r2"+L+S+D),
					     RContent := "r2_"+L+"_packet_"+S+"_"+D,
			    		     HVID := f_sha1("recv"+L+S+D),
					     BVID := f_sha1("packet"+L+S+D).
r2_2 recv(@L, S, D, DT) :- erecv(@L, S, D, DT, RID, HVID, BVID, RContent).
r2_3 prov(@L, HVID, RID, RContent) :- erecv(@L, S, D, DT, RID, HVID, BVID, RContent).
r2_4 insertedge(@L, RID1, RID2, RContent1, RContent2) :- erecv(@L, S, D, DT, RID1, HVID, BVID, RContent1), prov(@L, BVID, RID2, RContent2).


re_1 edgeCount(@Local, RID1, RID2, a_COUNT<*>, RContent1, RContent2) :- insertedge(@Local, RID1, RID2, RContent1, RContent2), edge(@Local, RID1, RID2, N, RContent1, RContent2).
re_2 edge(@Local, RID1, RID2, N, RContent1, RContent2) :- edgeCount(@Local, RID1, RID2, C, RContent1, RContent2), C == 0, N := 1.
re_3 edge(@Local, RID1, RID2, N1, RContent1, RContent2) :- edgeCount(@Local, RID1, RID2, C, RContent1, RContent2), edge(@Local, RID1, RID2, N, RContent1, RContent2), C > 0, N1 := N+1.
