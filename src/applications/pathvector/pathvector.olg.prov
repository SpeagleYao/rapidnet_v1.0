materialize(bestPath, -1, 0, keys(2)
materialize(link, -1, 0, keys(1, 2)
materialize(pQList, -1, 0, keys(1, 2)
materialize(pResultTmp, -1, 0, keys(1, 2)
materialize(path, -1, 0, keys(4)
materialize(prov, -1, 0, keys(1, 2, 3)
materialize(rQList, -1, 0, keys(1, 2)
materialize(rResultTmp, -1, 0, keys(1, 2)
materialize(ruleExec, -1, 0, keys(1, 2)
prov_r1_1 epathTemp(@RLOC, X, Y, C, P, RID, RWeight, R, List) :- link(@X, Y, C), PID1 := f_sha1(((link+ X)+ Y)+ C), List := f_append(PID1), P1 := f_append(X), P2 := f_append(Y), P := f_concat(P1, P2), RLOC := X, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
prov_r1_2 ruleExec(@RLOC, RID, RWeight, R, List) :- epathTemp(@RLOC, X, Y, C, P, RID, RWeight, R, List).
prov_r1_3 epath(@X, Y, C, P, RID, RWeight, RLOC) :- epathTemp(@RLOC, X, Y, C, P, RID, RWeight, R, List).
prov_r1_4 path(@X, Y, C, P) :- epath(@X, Y, C, P, RID, RWeight, RLOC).
prov_r1_5 prov(@X, VID, RID, RLOC, Score) :- epath(@X, Y, C, P, RID, RWeight, RLOC), VID := f_sha1((((path+ X)+ Y)+ C)+ P), Score := -1.
prov_r2_1 epathTemp(@RLOC, X, Y, C, P, RID, RWeight, R, List) :- link(@X, Z, C1), PID1 := f_sha1(((link+ X)+ Z)+ C1), List := f_append(PID1), bestPath(@Z, Y, C2, P2), PID2 := f_sha1((((bestPath+ Z)+ Y)+ C2)+ P2), List2 := f_append(PID2), List := f_concat(List, List2), C := C1+ C2, f_member(P2, X) == 0, P1 := f_append(X), P := f_concat(P1, P2), RLOC := X, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
prov_r3_1 ebestPathTemp(@RLOC, X, Y, C, P, RID, RWeight, R, List) :- bestPath(@X, Y, C, P), PID1 := f_sha1((((path+ X)+ Y)+ C)+ P), List := f_append(PID1), RLOC := X, RWeight := 1, R := r3, RID := f_sha1((R+ RLOC)+ List).
prov_r3_2 ruleExec(@RLOC, RID, RWeight, R, List) :- ebestPathTemp(@RLOC, X, Y, C, P, RID, RWeight, R, List).
prov_r3_3 ebestPath(@X, Y, C, P, RID, RWeight, RLOC) :- ebestPathTemp(@RLOC, X, Y, C, P, RID, RWeight, R, List).
r3 bestPath(@X, Y, MIN< C >, P) :- path(@X, Y, C, P).
prov_r3_5 prov(@X, VID, RID, RLOC, Score) :- ebestPath(@X, Y, C, P, RID, RWeight, RLOC), VID := f_sha1((((bestPath+ X)+ Y)+ C)+ P), Score := -1.
prov_edb_1 prov(@X, VID, RID, RLoc, Score) :- RLoc := X, link(@X, Y, C), VID := f_sha1(((link+ X)+ Y)+ C), RID := VID, Score := C.
edb1 pReturn(@Ret, QID, VID, Prov) :- provQuery(@X, QID, VID, P, Ret), prov(@X, VID, RID, RLoc, Score), RID == VID, shaResult(@X, VID, Content), Prov := Content.
idb1a pQList(@X, QID, P, LIST< RID >) :- provQuery(@X, QID, VID, P, Ret), prov(@X, VID, RID, RLoc, Score), RID != VID, f_member(P, VID) == 0.
idb1b pReturn(@Ret, QID, VID, Prov) :- provQuery(@X, QID, VID, P, Ret), prov(@X, VID, RID, RLoc, Score), RID != VID, f_member(P, VID) > 0, shaResult(@X, VID, Content), Prov := Content.
idb2 pResultTmp(@X, QID, Ret, VID, Buf) :- provQuery(@X, QID, VID, P, Ret), Buf := f_empty().
idb3 pIterate(@X, QID, N) :- provQuery(@X, QID, VID, P, Ret), N := 1.
idb4 pIterate(@X, QID, N) :- pIterate(@X, QID, N1), pQList(@X, QID, P, List), N1 < f_size(List), N := N1+ 1.
idb5 eRuleQuery(@X, NQID, RID, P) :- pIterate(@X, QID, N), pQList(@X, QID, P, List), N <= f_size(List), RID := f_item(List, N), NQID := f_sha1((+ QID)+ RID).
idb6 ruleQuery(@RLoc, QID, RID, P, X) :- eRuleQuery(@X, QID, RID, P1), prov(@X, VID, RID, RLoc, Score), P2 := f_append(VID), P := f_concat(P1, P2).
idb7 pResultTmp(@X, QID, Ret, VID, Buf) :- rReturn(@X, NQID, RID, Prov), pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
idb8 ePReturn(@X, QID) :- pResultTmp(@X, QID, Ret, VID, Buf), pQList(@X, QID, P, List), f_size(Buf) == f_size(List), f_size(Buf) != 0.
idb9a pReturn(@Ret, QID, VID, Prov) :- ePReturn(@X, QID), pResultTmp(@X, QID, Ret, VID, Buf), Prov1 := f_pIDB(Buf, X), shaResult(@X, VID, Content), Prov := Content+ Prov1.
rv1 rQList(@X, QID, P, List) :- ruleQuery(@X, QID, RID, P, Ret), ruleExec(@X, RID, RWeight, R, List).
rv2 rResultTmp(@X, QID, Ret, RID, Buf) :- ruleQuery(@X, QID, RID, P, Ret), Buf := f_empty().
rv3 rIterate(@X, QID, N) :- ruleQuery(@X, QID, RID, P, Ret), N := 1.
rv4 rIterate(@X, QID, N) :- rIterate(@X, QID, N1), rQList(@X, QID, P, List), N1 < f_size(List), N := N1+ 1.
rv5 eProvQuery(@X, NQID, VID, P) :- rIterate(@X, QID, N), rQList(@X, QID, P, List), VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
rv6 provQuery(@X, QID, VID, P, $1) :- $1 := X, eProvQuery(@X, QID, VID, P).
rv7 rResultTmp(@X, QID, Ret, RID, Buf) :- pReturn(@X, NQID, VID, Prov), rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
rv8 eRReturn(@X, QID) :- rResultTmp(@X, QID, Ret, RID, Buf), rQList(@X, QID, P, List), f_size(Buf) == f_size(List).
rv9 rReturn(@Ret, QID, RID, Prov) :- eRReturn(@X, QID), rResultTmp(@X, QID, Ret, RID, Buf), ruleExec(@X, RID, RWeight, R, List), Prov := f_pRULE(Buf, X, R, RWeight).
