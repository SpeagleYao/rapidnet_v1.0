/* A RapidNet application. Generated by RapidNet compiler. */

#include "smoke.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::smoke;

const string Smoke::CANCER = "cancer";
const string Smoke::FRIENDS = "friends";
const string Smoke::SHARESULT = "shaResult";
const string Smoke::SMOKE = "smoke";

NS_LOG_COMPONENT_DEFINE ("Smoke");
NS_OBJECT_ENSURE_REGISTERED (Smoke);

TypeId
Smoke::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::smoke::Smoke")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Smoke> ()
    ;
  return tid;
}

Smoke::Smoke()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Smoke::~Smoke()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Smoke::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Smoke::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Smoke Application Started");
}

void
Smoke::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Smoke Application Stopped");
}

void
Smoke::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (CANCER, attrdeflist (
    attrdef ("cancer_attr1", IPV4),
    attrdef ("cancer_attr2", INT32)));

  AddRelationWithKeys (FRIENDS, attrdeflist (
    attrdef ("friends_attr1", IPV4),
    attrdef ("friends_attr2", INT32),
    attrdef ("friends_attr3", INT32)));

  AddRelationWithKeys (SHARESULT, attrdeflist (
    attrdef ("shaResult_attr1", IPV4),
    attrdef ("shaResult_attr2", ID),
    attrdef ("shaResult_attr3", STR)));

  AddRelationWithKeys (SMOKE, attrdeflist (
    attrdef ("smoke_attr1", IPV4),
    attrdef ("smoke_attr2", INT32)));

}

void
Smoke::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, SMOKE))
    {
      R1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SMOKE))
    {
      R1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, FRIENDS))
    {
      R2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, FRIENDS))
    {
      R2Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, SMOKE))
    {
      R2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SMOKE))
    {
      R2Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, FRIENDS))
    {
      R3Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, FRIENDS))
    {
      R3Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, SMOKE))
    {
      R3Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SMOKE))
    {
      R3Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, SMOKE))
    {
      R11Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SMOKE))
    {
      R11Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, CANCER))
    {
      R12Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, CANCER))
    {
      R12Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, FRIENDS))
    {
      R13Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, FRIENDS))
    {
      R13Eca0Del (tuple);
    }
}

void
Smoke::R1Eca0Ins (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R1Eca0Ins triggered");

  Ptr<Tuple> result = smoke;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    CANCER,
    strlist ("Local",
      "smoke_attr2"),
    strlist ("cancer_attr1",
      "cancer_attr2"));

  Insert (result);
}

void
Smoke::R1Eca0Del (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R1Eca0Del triggered");

  Ptr<Tuple> result = smoke;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    CANCER,
    strlist ("Local",
      "smoke_attr2"),
    strlist ("cancer_attr1",
      "cancer_attr2"));

  Delete (result);
}

void
Smoke::R2Eca0Ins (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R2Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SMOKE)->Join (
    friends,
    strlist ("smoke_attr2", "smoke_attr1"),
    strlist ("friends_attr3", "friends_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("friends_attr2"),
      VarExpr::New ("friends_attr3"))));

  result = result->Project (
    SMOKE,
    strlist ("Local",
      "friends_attr2"),
    strlist ("smoke_attr1",
      "smoke_attr2"));

  Insert (result);
}

void
Smoke::R2Eca0Del (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R2Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SMOKE)->Join (
    friends,
    strlist ("smoke_attr2", "smoke_attr1"),
    strlist ("friends_attr3", "friends_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("friends_attr2"),
      VarExpr::New ("friends_attr3"))));

  result = result->Project (
    SMOKE,
    strlist ("Local",
      "friends_attr2"),
    strlist ("smoke_attr1",
      "smoke_attr2"));

  Delete (result);
}

void
Smoke::R2Eca1Ins (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R2Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FRIENDS)->Join (
    smoke,
    strlist ("friends_attr3", "friends_attr1"),
    strlist ("smoke_attr2", "smoke_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("friends_attr2"),
      VarExpr::New ("smoke_attr2"))));

  result = result->Project (
    SMOKE,
    strlist ("Local",
      "friends_attr2"),
    strlist ("smoke_attr1",
      "smoke_attr2"));

  Insert (result);
}

void
Smoke::R2Eca1Del (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R2Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FRIENDS)->Join (
    smoke,
    strlist ("friends_attr3", "friends_attr1"),
    strlist ("smoke_attr2", "smoke_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("friends_attr2"),
      VarExpr::New ("smoke_attr2"))));

  result = result->Project (
    SMOKE,
    strlist ("Local",
      "friends_attr2"),
    strlist ("smoke_attr1",
      "smoke_attr2"));

  Delete (result);
}

void
Smoke::R3Eca0Ins (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R3Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SMOKE)->Join (
    friends,
    strlist ("smoke_attr2", "smoke_attr1"),
    strlist ("friends_attr2", "friends_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("friends_attr2"),
      VarExpr::New ("friends_attr3"))));

  result = result->Project (
    SMOKE,
    strlist ("Local",
      "friends_attr3"),
    strlist ("smoke_attr1",
      "smoke_attr2"));

  Insert (result);
}

void
Smoke::R3Eca0Del (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R3Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SMOKE)->Join (
    friends,
    strlist ("smoke_attr2", "smoke_attr1"),
    strlist ("friends_attr2", "friends_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("friends_attr2"),
      VarExpr::New ("friends_attr3"))));

  result = result->Project (
    SMOKE,
    strlist ("Local",
      "friends_attr3"),
    strlist ("smoke_attr1",
      "smoke_attr2"));

  Delete (result);
}

void
Smoke::R3Eca1Ins (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R3Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FRIENDS)->Join (
    smoke,
    strlist ("friends_attr2", "friends_attr1"),
    strlist ("smoke_attr2", "smoke_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("smoke_attr2"),
      VarExpr::New ("friends_attr3"))));

  result = result->Project (
    SMOKE,
    strlist ("Local",
      "friends_attr3"),
    strlist ("smoke_attr1",
      "smoke_attr2"));

  Insert (result);
}

void
Smoke::R3Eca1Del (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R3Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FRIENDS)->Join (
    smoke,
    strlist ("friends_attr2", "friends_attr1"),
    strlist ("smoke_attr2", "smoke_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("smoke_attr2"),
      VarExpr::New ("friends_attr3"))));

  result = result->Project (
    SMOKE,
    strlist ("Local",
      "friends_attr3"),
    strlist ("smoke_attr1",
      "smoke_attr2"));

  Delete (result);
}

void
Smoke::R11Eca0Ins (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R11Eca0Ins triggered");

  Ptr<Tuple> result = smoke;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("smoke_attr2")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("smoke"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("smoke_attr2"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Insert (result);
}

void
Smoke::R11Eca0Del (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R11Eca0Del triggered");

  Ptr<Tuple> result = smoke;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("smoke_attr2")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("smoke"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("smoke_attr2"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Delete (result);
}

void
Smoke::R12Eca0Ins (Ptr<Tuple> cancer)
{
  RAPIDNET_LOG_INFO ("R12Eca0Ins triggered");

  Ptr<Tuple> result = cancer;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("cancer")),
          VarExpr::New ("cancer_attr1")),
        VarExpr::New ("cancer_attr2")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("cancer"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("cancer_attr2"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Insert (result);
}

void
Smoke::R12Eca0Del (Ptr<Tuple> cancer)
{
  RAPIDNET_LOG_INFO ("R12Eca0Del triggered");

  Ptr<Tuple> result = cancer;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("cancer")),
          VarExpr::New ("cancer_attr1")),
        VarExpr::New ("cancer_attr2")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("cancer"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("cancer_attr2"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Delete (result);
}

void
Smoke::R13Eca0Ins (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R13Eca0Ins triggered");

  Ptr<Tuple> result = friends;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("friends")),
            VarExpr::New ("friends_attr1")),
          VarExpr::New ("friends_attr2")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("friends"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("Name"),
            ValueExpr::New (StrValue::New ("_"))),
          VarExpr::New ("friends_attr2")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("friends_attr3"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Insert (result);
}

void
Smoke::R13Eca0Del (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R13Eca0Del triggered");

  Ptr<Tuple> result = friends;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("friends")),
            VarExpr::New ("friends_attr1")),
          VarExpr::New ("friends_attr2")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("friends"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("Name"),
            ValueExpr::New (StrValue::New ("_"))),
          VarExpr::New ("friends_attr2")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("friends_attr3"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Delete (result);
}

