/* A RapidNet application. Generated by RapidNet compiler. */

#include "smoke.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::smoke;

const string Smoke::CANCER = "cancer";
const string Smoke::ECANCER = "ecancer";
const string Smoke::EDGE = "edge";
const string Smoke::EDGECOUNT = "edgeCount";
const string Smoke::ESMOKE = "esmoke";
const string Smoke::FRIENDS = "friends";
const string Smoke::INSERTEDGE = "insertedge";
const string Smoke::PROV = "prov";
const string Smoke::SHARESULT = "shaResult";
const string Smoke::SMOKE = "smoke";

NS_LOG_COMPONENT_DEFINE ("Smoke");
NS_OBJECT_ENSURE_REGISTERED (Smoke);

TypeId
Smoke::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::smoke::Smoke")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Smoke> ()
    ;
  return tid;
}

Smoke::Smoke()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Smoke::~Smoke()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Smoke::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Smoke::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Smoke Application Started");
}

void
Smoke::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Smoke Application Stopped");
}

void
Smoke::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (CANCER, attrdeflist (
    attrdef ("cancer_attr1", IPV4),
    attrdef ("cancer_attr2", INT32)));

  AddRelationWithKeys (EDGE, attrdeflist (
    attrdef ("edge_attr1", IPV4),
    attrdef ("edge_attr2", IPV4),
    attrdef ("edge_attr3", IPV4),
    attrdef ("edge_attr4", INT32)));

  AddRelationWithKeys (FRIENDS, attrdeflist (
    attrdef ("friends_attr1", IPV4),
    attrdef ("friends_attr2", INT32),
    attrdef ("friends_attr3", INT32)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", IPV4),
    attrdef ("prov_attr3", IPV4)));

  AddRelationWithKeys (SHARESULT, attrdeflist (
    attrdef ("shaResult_attr1", IPV4),
    attrdef ("shaResult_attr2", ID),
    attrdef ("shaResult_attr3", STR)));

  AddRelationWithKeys (SMOKE, attrdeflist (
    attrdef ("smoke_attr1", IPV4),
    attrdef ("smoke_attr2", INT32)));

}

void
Smoke::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, SMOKE))
    {
      R1_1Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, ECANCER))
    {
      R1_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ECANCER))
    {
      R1_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, ECANCER))
    {
      R1_4_eca (tuple);
    }
  if (IsInsertEvent (tuple, FRIENDS))
    {
      R2_1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, SMOKE))
    {
      R2_1Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, ESMOKE))
    {
      R2_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, ESMOKE))
    {
      R2_3_eca (tuple);
    }
  if (IsRecvEvent (tuple, ESMOKE))
    {
      R2_4_eca (tuple);
    }
  if (IsInsertEvent (tuple, FRIENDS))
    {
      R3_1Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, SMOKE))
    {
      R3_1Eca2Ins (tuple);
    }
  if (IsRecvEvent (tuple, INSERTEDGE))
    {
      Re_1_eca (tuple);
    }
  if (IsRecvEvent (tuple, EDGECOUNT))
    {
      Re_2_eca (tuple);
    }
  if (IsRecvEvent (tuple, EDGECOUNT))
    {
      Re_3_eca (tuple);
    }
  if (IsInsertEvent (tuple, SMOKE))
    {
      R11Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SMOKE))
    {
      R11Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, CANCER))
    {
      R12Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, CANCER))
    {
      R12Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, FRIENDS))
    {
      R13Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, FRIENDS))
    {
      R13Eca0Del (tuple);
    }
}

void
Smoke::R1_1Eca0Ins (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R1_1Eca0Ins triggered");

  Ptr<Tuple> result = smoke;

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        ValueExpr::New (StrValue::New ("r1")),
        VarExpr::New ("smoke_attr1")))));

  result->Assign (Assignor::New ("BVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("smoke_attr2")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("cancer")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("smoke_attr2")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANCER,
    strlist ("Local",
      "smoke_attr2",
      "RID",
      "BVID",
      "HVID"),
    strlist ("ecancer_attr1",
      "ecancer_attr2",
      "ecancer_attr3",
      "ecancer_attr4",
      "ecancer_attr5"));

  SendLocal (result);
}

void
Smoke::R1_2_eca (Ptr<Tuple> ecancer)
{
  RAPIDNET_LOG_INFO ("R1_2_eca triggered");

  Ptr<Tuple> result = ecancer;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    CANCER,
    strlist ("Local",
      "ecancer_attr2"),
    strlist ("cancer_attr1",
      "cancer_attr2"));

  Insert (result);
}

void
Smoke::R1_3_eca (Ptr<Tuple> ecancer)
{
  RAPIDNET_LOG_INFO ("R1_3_eca triggered");

  Ptr<Tuple> result = ecancer;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "ecancer_attr5",
      "ecancer_attr3"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3"));

  Insert (result);
}

void
Smoke::R1_4_eca (Ptr<Tuple> ecancer)
{
  RAPIDNET_LOG_INFO ("R1_4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    ecancer,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("ecancer_attr4", "ecancer_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTEDGE,
    strlist ("Local",
      "ecancer_attr3",
      "prov_attr3"),
    strlist ("insertedge_attr1",
      "insertedge_attr2",
      "insertedge_attr3"));

  SendLocal (result);
}

void
Smoke::R2_1Eca0Ins (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R2_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SMOKE)->Join (
    friends,
    strlist ("smoke_attr2", "smoke_attr1"),
    strlist ("friends_attr3", "friends_attr1"));

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("friends")),
            VarExpr::New ("friends_attr1")),
          VarExpr::New ("friends_attr2")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("BVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("friends_attr1")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("r2")),
          VarExpr::New ("friends_attr1")),
        VarExpr::New ("PID")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("friends_attr1")),
        VarExpr::New ("friends_attr2")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESMOKE,
    strlist ("Local",
      "friends_attr2",
      "RID",
      "BVID",
      "HVID"),
    strlist ("esmoke_attr1",
      "esmoke_attr2",
      "esmoke_attr3",
      "esmoke_attr4",
      "esmoke_attr5"));

  SendLocal (result);
}

void
Smoke::R2_1Eca2Ins (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R2_1Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FRIENDS)->Join (
    smoke,
    strlist ("friends_attr3", "friends_attr1"),
    strlist ("smoke_attr2", "smoke_attr1"));

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("friends")),
            VarExpr::New ("smoke_attr1")),
          VarExpr::New ("friends_attr2")),
        VarExpr::New ("smoke_attr2")))));

  result->Assign (Assignor::New ("BVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("smoke_attr2")))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("r2")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("PID")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("friends_attr2")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESMOKE,
    strlist ("Local",
      "friends_attr2",
      "RID",
      "BVID",
      "HVID"),
    strlist ("esmoke_attr1",
      "esmoke_attr2",
      "esmoke_attr3",
      "esmoke_attr4",
      "esmoke_attr5"));

  SendLocal (result);
}

void
Smoke::R2_2_eca (Ptr<Tuple> esmoke)
{
  RAPIDNET_LOG_INFO ("R2_2_eca triggered");

  Ptr<Tuple> result = esmoke;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SMOKE,
    strlist ("Local",
      "esmoke_attr2"),
    strlist ("smoke_attr1",
      "smoke_attr2"));

  Insert (result);
}

void
Smoke::R2_3_eca (Ptr<Tuple> esmoke)
{
  RAPIDNET_LOG_INFO ("R2_3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    esmoke,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("esmoke_attr4", "esmoke_attr1"));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    INSERTEDGE,
    strlist ("Local",
      "esmoke_attr3",
      "prov_attr3"),
    strlist ("insertedge_attr1",
      "insertedge_attr2",
      "insertedge_attr3"));

  SendLocal (result);
}

void
Smoke::R2_4_eca (Ptr<Tuple> esmoke)
{
  RAPIDNET_LOG_INFO ("R2_4_eca triggered");

  Ptr<Tuple> result = esmoke;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "esmoke_attr5",
      "esmoke_attr3"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3"));

  Insert (result);
}

void
Smoke::R3_1Eca0Ins (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R3_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SMOKE)->Join (
    friends,
    strlist ("smoke_attr2", "smoke_attr1"),
    strlist ("friends_attr2", "friends_attr1"));

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("friends")),
            VarExpr::New ("friends_attr1")),
          VarExpr::New ("friends_attr2")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("BVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("friends_attr1")),
        VarExpr::New ("friends_attr2")))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("r3")),
          VarExpr::New ("friends_attr1")),
        VarExpr::New ("PID")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("friends_attr1")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESMOKE,
    strlist ("Local",
      "friends_attr3",
      "RID",
      "BVID",
      "HVID"),
    strlist ("esmoke_attr1",
      "esmoke_attr2",
      "esmoke_attr3",
      "esmoke_attr4",
      "esmoke_attr5"));

  SendLocal (result);
}

void
Smoke::R3_1Eca2Ins (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R3_1Eca2Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (FRIENDS)->Join (
    smoke,
    strlist ("friends_attr2", "friends_attr1"),
    strlist ("smoke_attr2", "smoke_attr1"));

  result->Assign (Assignor::New ("PID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("friends")),
            VarExpr::New ("smoke_attr1")),
          VarExpr::New ("smoke_attr2")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("BVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("smoke_attr2")))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("r3")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("PID")))));

  result->Assign (Assignor::New ("HVID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESMOKE,
    strlist ("Local",
      "friends_attr3",
      "RID",
      "BVID",
      "HVID"),
    strlist ("esmoke_attr1",
      "esmoke_attr2",
      "esmoke_attr3",
      "esmoke_attr4",
      "esmoke_attr5"));

  SendLocal (result);
}

void
Smoke::Re_1_eca (Ptr<Tuple> insertedge)
{
  RAPIDNET_LOG_INFO ("Re_1_eca triggered");
  cout << "re1 triggered" << endl;
  cout << insertedge << endl;

  Ptr<RelationBase> result;

  result = GetRelation (EDGE)->Join (
    insertedge,
    strlist ("edge_attr1", "edge_attr2", "edge_attr3"),
    strlist ("insertedge_attr1", "insertedge_attr2", "insertedge_attr3"));

  result->PrintAllTuples(cout);


  // result->Assign (Assignor::New ("Local",
  //   LOCAL_ADDRESS));

  result = AggWrapCount::New ()->Compute (result, insertedge);

  result = result->Project (
    EDGECOUNT,
    strlist ("insertedge_attr1",
      "insertedge_attr2",
      "insertedge_attr3",
      "count"),
    strlist ("edgeCount_attr1",
      "edgeCount_attr2",
      "edgeCount_attr3",
      "edgeCount_attr4"));

  cout << "project success" << endl;

  SendLocal (result);
}

void
Smoke::Re_2_eca (Ptr<Tuple> edgeCount)
{
  RAPIDNET_LOG_INFO ("Re_2_eca triggered");

  Ptr<Tuple> result = edgeCount;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("edgeCount_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EDGE,
    strlist ("Local",
      "edgeCount_attr2",
      "edgeCount_attr3",
      "N"),
    strlist ("edge_attr1",
      "edge_attr2",
      "edge_attr3",
      "edge_attr4"));

  Insert (result);
}

void
Smoke::Re_3_eca (Ptr<Tuple> edgeCount)
{
  RAPIDNET_LOG_INFO ("Re_3_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (EDGE)->Join (
    edgeCount,
    strlist ("edge_attr1", "edge_attr2", "edge_attr3"),
    strlist ("edgeCount_attr1", "edgeCount_attr2", "edgeCount_attr3"));

  result->Assign (Assignor::New ("N1",
    Operation::New (RN_PLUS,
      VarExpr::New ("edge_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("edgeCount_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EDGE,
    strlist ("Local",
      "edgeCount_attr2",
      "edgeCount_attr3",
      "N1"),
    strlist ("edge_attr1",
      "edge_attr2",
      "edge_attr3",
      "edge_attr4"));

  Insert (result);
}

void
Smoke::R11Eca0Ins (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R11Eca0Ins triggered");

  Ptr<Tuple> result = smoke;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("smoke_attr2")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("smoke"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("smoke_attr2"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Insert (result);
}

void
Smoke::R11Eca0Del (Ptr<Tuple> smoke)
{
  RAPIDNET_LOG_INFO ("R11Eca0Del triggered");

  Ptr<Tuple> result = smoke;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("smoke")),
          VarExpr::New ("smoke_attr1")),
        VarExpr::New ("smoke_attr2")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("smoke"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("smoke_attr2"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Delete (result);
}

void
Smoke::R12Eca0Ins (Ptr<Tuple> cancer)
{
  RAPIDNET_LOG_INFO ("R12Eca0Ins triggered");

  Ptr<Tuple> result = cancer;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("cancer")),
          VarExpr::New ("cancer_attr1")),
        VarExpr::New ("cancer_attr2")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("cancer"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("cancer_attr2"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Insert (result);
}

void
Smoke::R12Eca0Del (Ptr<Tuple> cancer)
{
  RAPIDNET_LOG_INFO ("R12Eca0Del triggered");

  Ptr<Tuple> result = cancer;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("cancer")),
          VarExpr::New ("cancer_attr1")),
        VarExpr::New ("cancer_attr2")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("cancer"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("cancer_attr2"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Delete (result);
}

void
Smoke::R13Eca0Ins (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R13Eca0Ins triggered");

  Ptr<Tuple> result = friends;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("friends")),
            VarExpr::New ("friends_attr1")),
          VarExpr::New ("friends_attr2")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("friends"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("Name"),
            ValueExpr::New (StrValue::New ("_"))),
          VarExpr::New ("friends_attr2")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("friends_attr3"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Insert (result);
}

void
Smoke::R13Eca0Del (Ptr<Tuple> friends)
{
  RAPIDNET_LOG_INFO ("R13Eca0Del triggered");

  Ptr<Tuple> result = friends;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("friends")),
            VarExpr::New ("friends_attr1")),
          VarExpr::New ("friends_attr2")),
        VarExpr::New ("friends_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("friends"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("Name"),
            ValueExpr::New (StrValue::New ("_"))),
          VarExpr::New ("friends_attr2")),
        ValueExpr::New (StrValue::New ("_"))),
      VarExpr::New ("friends_attr3"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "VID",
      "Content"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Delete (result);
}

